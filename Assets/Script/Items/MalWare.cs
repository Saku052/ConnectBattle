using UnityEngine;

[CreateAssetMenu(fileName = "Status", menuName = "ScriptableObjects/MalWare")]
public class MalWare : ScriptableObject
{
    public string MalWareName;
    public string MalWareDescription;
    public Sprite MalWareImage;
    public MalwareType.Type MalWareType;
    public int MalWarePrice;
    public int MalWareRank;

    
    public int BasicStat;
    public int MainStat;
    public DamageCalc.StatusType BasicStatType;
    public DamageCalc.StatusType MainStatType;


    // when crack is succesful
    public (Status Main, Status Enemy, int return_damage) Crack(Status a_status, Status b_status)
    {
        switch (a_status.MalWare.MalWareType)
        {
            case MalwareType.Type.Seigi:
                return MalwareType.CrackSeigi(a_status, b_status);
            default:
                return MalwareType.CrackSeigi(a_status, b_status);
        }
    }

    // when burst is succesful
    public (Status Main, Status Enemy, int return_damage) Burst(Status a_status, Status b_status)
    {
        switch (a_status.MalWare.MalWareType)
        {
            case MalwareType.Type.Seigi:
                return MalwareType.BurstSeigi(a_status, b_status);
            default:
                return MalwareType.BurstSeigi(a_status, b_status);
        }
    }

    
}

public static class MalwareType
{
    public enum Type
    {
        Seigi, Kyoufu
        }


    public static (Status Main, Status Enemy, int return_damage) CrackSeigi(Status a_status, Status b_status)
    {
        float damage = (float)DamageCalc.AtkCalc(a_status, b_status) * (0.4f + (float)a_status.MalWare.MalWareRank * 0.3f);
        int def = DamageCalc.DefCalc(a_status, b_status);
        int red_atk = DamageCalc.RedAtkCalc(a_status, b_status);

        b_status.Hp -= (int)damage;
        b_status.Def -= def;
        a_status.Atk -= red_atk;

        // return hp and def
        return (a_status, b_status, (int)damage);
    }

    public static (Status Main, Status Enemy, int return_damage) BurstSeigi(Status a_status, Status b_status)
    {
        float damage = (float)DamageCalc.AtkCalc(a_status, b_status) * (1.2f + (float)a_status.MalWare.MalWareRank * 0.3f);
        int def = DamageCalc.DefCalc(a_status, b_status);
        float red_atk = (float)DamageCalc.RedAtkCalc(a_status, b_status);   

        b_status.Hp -= (int)damage;
        b_status.Def -= def;
        a_status.Atk -= (int)red_atk;

        // heal atk
        a_status.Atk += (int)(a_status.Def * 1.0f);

        // return hp and def
        return (a_status, b_status, (int)damage);
    }
}

